# -*- coding: utf-8 -*-

import kivy
kivy.require('1.9.1')

from kivy.uix.gridlayout import GridLayout
from kivy.config import Config
from kivy.uix.textinput import TextInput
from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.uix.label import Label

''' Static Data '''
game_to_solve = [[3, 0, 7, 1, 0, 0, 0, 6, 5],
                 [5, 0, 6, 9, 2, 0, 0, 1, 0],
                 [0, 0, 9, 0, 0, 3, 0, 8, 0],
                 [0, 9, 0, 3, 0, 8, 0, 0, 7],
                 [0, 4, 0, 0, 0, 0, 0, 3, 0],
                 [1, 0, 0, 4, 0, 5, 0, 2, 0],
                 [0, 6, 0, 5, 0, 0, 3, 0, 0],
                 [0, 3, 0, 0, 9, 6, 2, 0, 1],
                 [2, 5, 0, 0, 0, 1, 6, 0, 4]]

game_solution = [[3, 2, 7, 1, 8, 4, 9, 6, 5],
                 [5, 8, 6, 9, 2, 7, 4, 1, 3],
                 [4, 1, 9, 6, 5, 3, 7, 8, 2],
                 [6, 9, 2, 3, 1, 8, 5, 4, 7],
                 [8, 4, 5, 2, 7, 9, 1, 3, 6],
                 [1, 7, 3, 4, 6, 5, 8, 2, 9],
                 [9, 6, 1, 5, 4, 2, 3, 7, 8],
                 [7, 3, 4, 8, 9, 6, 2, 5, 1],
                 [2, 5, 8, 7, 3, 1, 6, 9, 4]]

class Sudoku(GridLayout):
    def __init__(self):
        super(Sudoku, self).__init__()
        self.row = 10
        self.cols = 9
        empty_cases_text_box = []
        count_zeros = 0
        for case in game_to_solve :
            count_zeros += case.count(0)
        for empty_cases in range (count_zeros) :
            empty_cases_text_box.append(TextInput(multiline=False))
        count_zeros = 0
        for sudoku_row in game_to_solve:
            for sudoku_case in sudoku_row :
                if sudoku_case != 0:
                    self.add_widget(Label(text=str(sudoku_case)))
                if sudoku_case == 0:
                    self.add_widget(empty_cases_text_box[count_zeros])
                    count_zeros += 1
        validation_button= Button(text='Entrer')
        self.add_widget(validation_button)

        def showSolution(w):
            solution_grid = GridLayout(cols=9)
            counter=0
            for row in range(0,9):
                for column in range (0,9) :
                    if game_to_solve[row][column] != 0:
                        solution_grid.add_widget(Label(text='[b]'+str(game_solution[row][column]) + '[/b]', markup=True))
                    if game_to_solve[row][column] == 0:
                        if empty_cases_text_box[counter].text != str(game_solution[row][column]):
                            solution_grid.add_widget(Label(text='[b][color=ff0000]'+str(game_solution[row][column]) + '[/color][/b]', markup=True))
                        else :
                            solution_grid.add_widget(Label(text='[b][color=00ff00]'+str(game_solution[row][column]) + '[/color][/b]', markup=True))
                        counter +=1
            pop_up_solution = Popup(title='solution', content=solution_grid,)
            pop_up_solution.open()

        validation_button.bind(on_press=showSolution)

class sudokuGame(App):
    def build(self) :
        return Sudoku()

Config.set('graphics', 'width', '500')
Config.set('graphics', 'height', '500')

sudokuGame().run()
